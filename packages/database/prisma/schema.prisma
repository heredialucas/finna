// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  seller
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  name        String
  lastName    String
  role        UserRole @default(seller)
  password    String
  permissions Json     @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  emailTemplates    EmailTemplate[]
  whatsappTemplates WhatsAppTemplate[]
  clients           Client[] // Un vendedor puede tener muchos clientes
  orders            Order[] // Un vendedor puede realizar muchos pedidos
  inventory         Inventory[] // Un vendedor tiene un inventario de productos
}

model EmailTemplate {
  id          String  @id @default(uuid())
  name        String // Nombre del template para identificarlo
  subject     String // Asunto del email
  content     String // Contenido del email
  description String? // Descripción opcional del template
  isDefault   Boolean @default(false) // Si es un template por defecto del sistema

  // Metadatos
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user User @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("email_templates")
}

model WhatsAppTemplate {
  id          String  @id @default(uuid())
  name        String // Nombre del template para identificarlo
  content     String // Contenido del mensaje de WhatsApp
  description String? // Descripción opcional del template
  isDefault   Boolean @default(false) // Si es un template por defecto del sistema

  // Metadatos
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user User @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("whatsapp_templates")
}

model Client {
  id             String   @id @default(uuid())
  firstName      String
  lastName       String
  email          String?  @unique
  phone          String?
  address        String?
  accountBalance Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  sellerId String
  seller   User   @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  orders Order[] // Un cliente puede tener muchos pedidos

  @@map("clients")
}

model Product {
  id              String      @id @default(uuid())
  name            String
  description     String?
  sku             String      @unique // Stock Keeping Unit
  price           Float
  quantityInStock Int         @default(0) // Stock en almacén central
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderItems      OrderItem[]
  inventories     Inventory[]

  @@map("products")
}

model Inventory {
  id        String   @id @default(uuid())
  quantity  Int
  updatedAt DateTime @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  sellerId String
  seller   User   @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@unique([productId, sellerId])
  @@map("inventory")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id          String      @id @default(uuid())
  orderDate   DateTime    @default(now())
  status      OrderStatus @default(PENDING)
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  sellerId String
  seller   User   @relation(fields: [sellerId], references: [id])

  items    OrderItem[]
  payments Payment[]

  @@map("orders")
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float // Precio en el momento del pedido

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  BANK_TRANSFER
  OTHER
}

model Payment {
  id            String        @id @default(uuid())
  paymentDate   DateTime      @default(now())
  amount        Float
  paymentMethod PaymentMethod
  receiptNumber String?       @unique
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  @@map("payments")
}
