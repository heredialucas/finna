// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  user
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  name        String
  lastName    String
  role        UserRole @default(user)
  password    String
  permissions Json     @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  websites  Website[]
  scrapings Scraping[]
  schedules Schedule[]

  @@map("users")
}

model Website {
  id          String   @id @default(uuid())
  name        String // Nombre descriptivo del sitio web
  url         String // URL del sitio web a scrapear
  description String? // Descripción opcional
  isActive    Boolean  @default(true) // Si el sitio está activo para scraping
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  scrapings Scraping[]
  schedules Schedule[]

  @@map("websites")
}

model Scraping {
  id          String    @id @default(uuid())
  status      String // 'pending', 'running', 'completed', 'failed'
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  error       String? // Mensaje de error si falló
  data        Json? // Datos extraídos del scraping

  // Relaciones
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  websiteId String
  website   Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@map("scrapings")
}

model Schedule {
  id          String   @id @default(uuid())
  guideName   String // Nombre del guía turístico
  date        DateTime // Fecha del horario
  startTime   String // Hora de inicio (formato HH:MM)
  endTime     String // Hora de fin (formato HH:MM)
  tourType    String? // Tipo de tour (opcional)
  notes       String? // Notas adicionales
  isAvailable Boolean  @default(true) // Si el horario está disponible
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  websiteId String
  website   Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@map("schedules")
}
